@Library('utils@master') _
import com.lmig.intl.cloud.jenkins.util.EnvConfigUtil

def envUtil = new EnvConfigUtil()
countryParams = envUtil.getCountryEnvDetails(env.JOB_NAME)

pipeline {
    agent {
        label 'linux'
    }
 
    parameters {
        string(name: 'Email', defaultValue: '', description: 'Email. Ex: example@hdiexample.com.co')
        // choice(name: 'Stage', choices: ['dev', 'nonprod', 'uat', 'prod'], description: 'Stage or Enviroment to Excute. Ex: dev')
        choice(name: 'Action', choices: ['SELECT'], description: 'Select the action to execute. Ex: SELECT')
        string(name: 'Attributes', defaultValue: '*', description: 'Select attributes to display. (*) for all attributes, if you want to specify placing the attributes separated by (,). Example: id, name')
        string(name: 'TableName', defaultValue: '', description: 'Write the Table Name. Example: MyTable')
        string(name: 'Conditional', defaultValue: '', description: 'Write condition. Example: id = 1')
    }
 
    environment {
        USER_INPUT = null
        QUERY = null
        APP_ENV = countryParams.countryEnv.toLowerCase()
        RESULT = null
    }
 
    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '1', daysToKeepStr: '1'))
    }
 
    stages {
        stage('Configuration') {
            steps {
                script {
                    deleteDir()
                    USER_INPUT = [Programmed: false, Schedule: '', Comment: '', userSubmitter: '']
                }
            }
        }
 
        stage('Set Query') {
            steps {
                script {
                    // Build the dynamic PartiQL query using the parameters
                    def action = params.Action
                    def attributes = params.Attributes
                    def conditional = params.Conditional
                    // Define the table name (you can adjust this or make it a parameter if needed)
                    def tableName = params.TableName
 
                    // Build the PartiQL query
                    QUERY = "${action} ${attributes} FROM \"${tableName}\" WHERE ${conditional}"
 
                    // Show the generated PartiQL query
                    echo "Generated PartiQL query: ${QUERY}"
                }
            }
        }
 
        stage('Approvers') {
            when {
                expression {
                    return APP_ENV == "prod" || APP_ENV == "nonprod" || APP_ENV == "uat"
                }
            }
            steps {
                script {
                    USER_INPUT = input message: "Do you approve the execution of the following query?\n\n${QUERY}", 
                                        ok: "Execute",
                                        submitterParameter: 'userSubmitter'
                }
            }
        }
        
        stage('Dev - Execute Query PartiQL') {
            when {
                expression {
                    return APP_ENV == "dev"
                }
            }
            steps {
                script {
                    deployToDev {   
                        RESULT = sh(script: "aws dynamodb execute-statement --statement '${QUERY}' --region us-east-1", returnStdout: true).trim()
                    }
                }
            }
        }
        
        stage('Nonprod - Execute Query PartiQL') {
            when {
                expression {
                    return APP_ENV == "nonprod"
                }
            }
            steps {
                script {
                    deployToNonProd {   
                        RESULT = sh("aws dynamodb execute-statement --statement ${QUERY} --output json --region us-east-1", returnStdout: true).trim()
                    }
                }
            }
        }
        
        stage('Prod - Execute Query PartiQL') {
            when {
                expression {
                    return APP_ENV == "prod"
                }
            }
            steps {
                script {
                    deployToProd {   
                        RESULT = sh("aws dynamodb execute-statement --statement ${QUERY} --output json --region us-east-1", returnStdout: true).trim()
                    }
                }
            }
        }
        
                
        stage('Summary') {
            steps {
                script {
                    echo "Query: ${QUERY}"
                    echo "Result: ${RESULT}"
                }
            }
        }
        
        
        
    }
 
    post {
        always {
            cleanWs()
        }   
    }
}
