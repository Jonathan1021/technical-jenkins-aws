pipeline {
    agent any

    parameters {
        string(name: 'Email', defaultValue: '', description: 'Ejemplo: example@hdiexample.com.co')
        choice(name: 'Action', choices: ['Create Secret', 'Update Secret'], description: 'Seleccione la opcion a ejecutar')
    }

    environment {
        USER_INPUT = null
        QUERY = null
    }

    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }

    stages {
        stage('Create Secret') {
            when {
                expression {
                    params.Action == "Create Secret"
                }
            }
            steps {
                script {
                    USER_INPUT = input message: "Configure Secret", 
                                ok: "Execute",
                                submitterParameter: 'userSubmitter',
                                parameters: [
                                    string(name: 'TrouxID', description: 'Input tag TrouxId. Example: de34e7b8-adbb-4bcd-b7df-869c45b86308'),
                                    string(name: 'Project Name', description: 'Name of the project that the secret is associated with. Example: low-touch'),
                                    string(name: 'Suffix', defaultValue: '', description: 'Name of the project that the secret is associated with. Example: low-touch'),
                                    jsonEditor(name: 'Json',  description: 'Key/Value pairs')
                                ]
                    sh """
                    echo Create Secret...
                    """                 
                }
            }
        }

        stage('Update Secret') {
            when {
                expression {
                    params.Action == "Update Secret"
                }
            }
            steps {
                script {
                    sh """
                    echo Update Secret...
                    """
                }
            }
        }

        stage('Create/Update Secret') {
            steps {
                script {
                    sh """
                    echo Create/Update
                    """
                }
            }
        }

        stage('Approvers') {
            when {
                expression {
                    return params.Stage == "prod" || params.Stage == "nonprod" || params.Stage == "uat"
                }
            }
            steps {
                script {
                    USER_INPUT = input message: "Do you approve the execution of the following query?\n\n${QUERY}", 
                                        ok: "Execute",
                                        submitterParameter: 'userSubmitter'
                }
            }
        }

        stage('Execute Query PartiQL') {
            steps {
                script {
                    sh """
                    echo Executing... ${QUERY}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        // success {
        //     script {
        //         notificationSuccess()
        //     }
        // }
        // failure {
        //     script {
        //         notificationError()
        //     }
        // }    
    }
}

def notificationSuccess() {
    def subject = "${Email}"
    def bodyText = ""
    subject = "[${params.Stage}] - Released Success in ${env.JOB_NAME} - ${params.ArtifactoryId}"
    bodyText = """
    Hi there!!

    Deployment successful! Artifactory ID: ${params.ArtifactoryId} to the ${params.Stage} environment.

    See job here: ${env.BUILD_URL}

    See log here: ${env.BUILD_URL}consoleText
    """
    echo "Sending email with subject '${Email}' and content:\n${bodyText}"
}

def notificationError() {
    def subject = "${Email}"
    def bodyText = ""
    subject = "[${params.Stage}] - Released Error in ${env.JOB_NAME} - ${params.ArtifactoryId}"
    bodyText = """
    Hi there!!

    Deployment successful! Artifactory ID: ${params.ArtifactoryId} to the ${params.Stage} environment. 

    See job here: ${env.BUILD_URL}

    See log here: ${env.BUILD_URL}consoleText
    """
    echo "Sending email with subject '${Email}' and content:\n${bodyText}"
}